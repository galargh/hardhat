name: Release

on:
  # TODO: When a release PR is merged we should run a merge_group check to ensure:
  # 1. The release PR is the only one in the merge group
  # 2. The release PR is up-to-date with the target branch
  #    i.e. no other PR has been merged since the release PR was added to the merge queue
  workflow_dispatch:
  push:
    branches:
      - v-next

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # This allows us to push to the repository and create GitHub releases
      pull-requests: write # This allows us to create pull requests
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Set up the environment
        uses: ./.github/actions/setup-env

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Create Release Pull Request
        id: pr
        env:
          # NOTE: If we use the GITHUB_TOKEN to create the release PR, the checks will not be triggered automatically
          GITHUB_TOKEN: ${{ github.token }}
        uses: changesets/action@v1
        with:
          version: pnpm run version

      - name: Build All Packages
        if: steps.pr.outputs.hasChangesets == 'false'
        run: pnpm run --recursive -no-bail --filter './v-next/**' --if-present build

      # - name: Publish All Packages (dry-run)
      #   if: steps.pr.outputs.hasChangesets == 'false'
      #   run: pnpm publish --filter "./v-next/**" -r --no-git-checks --tag next --access public --dry-run

      - name: Publish All Packages
        id: publish
        if: steps.pr.outputs.hasChangesets == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          echo "stdout<<EOF" >> $GITHUB_OUTPUT
          pnpm publish --filter "./v-next/**" -r --no-git-checks --tag next --access public --dry-run | tee -a $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if hardhat was published
        id: hardhat
        if: steps.pr.outputs.hasChangesets == 'false'
        env:
          STDOUT: ${{ steps.publish.outputs.stdout }}
        uses: actions/github-script@v7
        with:
          script: |
            const lines = process.env.STDOUT.split('\n')

            core.info('Checking if Hardhat was published')

            const line = lines.find(line => line.startsWith('+ hardhat@'))

            if (line === undefined) {
              core.info('Hardhat was not published')
              core.setOutput('version', '')
              process.exit(0)
            }

            const version = line.split('@')[1]
            core.info(`Hardhat was published with version ${version}`)
            core.setOutput('version', version)

      - name: Check the version of the published package
        id: version
        if: steps.hardhat.outputs.version != ''
        env:
          VERSION: steps.hardhat.outputs.version
        uses: actions/github-script@v7
        with:
          script: |
            const version = process.env.VERSION

            core.info('Checking if Hardhat was published as a prerelease')

            // NOTE: This check would mark non-prerelease versions with - in the build tag as prereleases
            const prerelease = version.includes('-')
            if (prerelease) {
              core.info('Hardhat was published as a prerelease')
              core.setOutput('prerelease', true)
            } else {
              core.info('Hardhat was not published as a prerelease')
              core.setOutput('prerelease', false)
            }

            core.info('Checking if this is the latest version')

            if (prerelease) {
              core.info('This is a prerelease, so this is not the latest version')
              core.setOutput('latest', false)
              process.exit(0)
            }

            const { data: release } = await github.rest.repos.getLatestRelease(context.repo)

            if (release === undefined) {
              core.info('No existing latest release found, so this is the latest version')
              core.setOutput('latest', true)
              process.exit(0)
            }

            const latestVersion = release.tag_name.split('@')[1]
            core.info(`Current latest version is ${latestVersion}`)

            const ([major, minor, patch]) = version.split('.')
            const ([latestMajor, latestMinor, latestPatch]) = latestVersion.split('.')

            if (parseInt(major, 10) > parseInt(latestMajor, 10) ||
                parseInt(minor, 10) > parseInt(latestMinor, 10) ||
                parseInt(patch, 10) > parseInt(latestPatch, 10)) {
              core.info('This is a new latest version')
              core.setOutput('latest', true)
            } else {
              core.info('This is not a new latest version')
              core.setOutput('latest', false)
            }

      - name: Find the relevant changelog entry
        id: changelog
        if: steps.hardhat.outputs.version != ''
        env:
          VERSION: steps.hardhat.outputs.version
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')

            const changelog = fs.readFileSync('./v-next/hardhat/CHANGELOG.md')
            core.debug(`Changelog: ${changelog}`)

            core.info('Parsing changelog...')
            const lines = changelog.split('\n')
            const headerIndex = lines.findIndex((line) => line == `## ${process.env.VERSION}`)

            if (headerIndex == -1) {
              core.error(`Changelog entry for version ${process.env.VERSION} not found in ./v-next/hardhat/CHANGELOG.md`)
              process.exit(1)
            }

            const entryLines = [];

            for (const line of lines.slice(headerIndex + 1)) {
              if (line.startsWith('## ')) {
                break
              }
              entryLines.push(line)
            }

            const entry = entryLines.join('\n').trim()

            core.debug(`Entry: ${entry}`)
            core.setOutput('entry', entry)

      - name: Create GitHub Release
        if: steps.hardhat.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # NOTE: The action updates the release if it already exists
        uses: galargh/action-gh-release@571276229e7c9e6ea18f99bad24122a4c3ec813f # https://github.com/galargh/action-gh-release/pull/1
        with:
          draft: false
          tag_name: hardhat@${{ steps.hardhat.outputs.version }}
          generate_release_notes: false
          target_commitish: ${{ github.sha }}
          make_latest: ${{ steps.version.outputs.latest == 'true' }}
          prerelease: ${{ steps.version.outputs.prerelease == 'true' }}
          body: |
            # ${{ steps.hardhat.outputs.version }}

            ### Changes

            ${{ steps.changelog.outputs.entry }}

            ---
            > ðŸ’¡ **The Nomic Foundation is hiring! Check [our open positions](https://www.nomic.foundation/jobs).**
            ---
          token: ${{ github.token }}
